{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["particleOptions","filter","x","y","image","get","b","color","radius","Math","random","mass","friction","initialPosition","canvasDimensions","Vector","width","height","motionForce","forces","disturbance","App","useWindowSize","innerWidth","innerHeight","src","Number","scale","entropy","maxParticles","mouseMoveForce","touchMoveForce","backgroundColor","style","position","top","bottom","left","right","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAQMA,EAAmC,CACvCC,OAAQ,YAAsB,IAAnBC,EAAkB,EAAlBA,EAAGC,EAAe,EAAfA,EAIZ,OAJ2B,EAAZC,MAEKC,IAAIH,EAAGC,GAEdG,EAAI,IAEnBC,MAAO,cAAGL,EAAH,EAAMC,EAAN,EAASC,MAAT,MAAqB,WAC5BI,OAAQ,kBAAsB,IAAhBC,KAAKC,SAAiB,IACpCC,KAAM,kBAAM,IACZC,SAAU,iBAAM,KAChBC,gBAAiB,YAA2B,IAAxBC,EAAuB,EAAvBA,iBAClB,OAAO,IAAIC,IAAOD,EAAiBE,MAAQ,EAAGF,EAAiBG,OAAS,KAItEC,EAAc,SAAChB,EAAQC,GAC3B,OAAOgB,IAAOC,YAAYlB,EAAGC,EAAG,KAuBnBkB,MApBf,WACE,MAAoCC,cAA5BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAEpB,OACE,cAAC,IAAD,CACEC,IAA8B,6BAC9BT,MAAOU,OAAOH,GACdN,OAAQS,OAAOF,GACfG,MAAO,IACPC,QAAS,EACTC,aAAc,KACd7B,gBAAiBA,EACjB8B,eAAgBZ,EAChBa,eAAgBb,EAChBc,gBAAgB,UAChBC,MAAO,CAAEC,SAAU,WAAYC,IAAK,EAAGC,OAAQ,EAAGC,KAAM,EAAGC,MAAO,MC7BzDC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fc6d11b.chunk.js","sourcesContent":["import './App.css'\nimport useWindowSize from '@rooks/use-window-size'\nimport ParticleImage, {\n  ParticleOptions,\n  Vector,\n  forces,\n} from 'react-particle-image'\n\nconst particleOptions: ParticleOptions = {\n  filter: ({ x, y, image }) => {\n    // Get pixel\n    const pixel = image.get(x, y)\n    // Make a particle for this pixel if blue > 50 (range 0-255)\n    return pixel.b > 50\n  },\n  color: ({ x, y, image }) => '#a4886a',\n  radius: () => Math.random() * 1.5 + 0.5,\n  mass: () => 20,\n  friction: () => 0.15,\n  initialPosition: ({ canvasDimensions }) => {\n    return new Vector(canvasDimensions.width / 2, canvasDimensions.height / 2)\n  },\n}\n\nconst motionForce = (x: any, y: any) => {\n  return forces.disturbance(x, y, 15)\n}\n\nfunction App() {\n  const { innerWidth, innerHeight } = useWindowSize()\n\n  return (\n    <ParticleImage\n      src={process.env.PUBLIC_URL + '/img/0xv002-comingsoon.png'}\n      width={Number(innerWidth)}\n      height={Number(innerHeight)}\n      scale={0.75}\n      entropy={5}\n      maxParticles={12000}\n      particleOptions={particleOptions}\n      mouseMoveForce={motionForce}\n      touchMoveForce={motionForce}\n      backgroundColor=\"#191D1F\"\n      style={{ position: 'absolute', top: 0, bottom: 0, left: 0, right: 0 }}\n    />\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}